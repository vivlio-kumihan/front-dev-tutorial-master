@use "mixin" as *;

img {
  // 画像の横幅を親要素の横幅に合わせる。
  max-width: 100%;
  // vertical-alignとは
  //   vertical-alignとは行中のテキストや画像などの内容の
  // 　上下方向の揃え位置を指定するプロパティです。
  // 　インライン要素とテーブルセルにのみ適用することができます。
  //   以下の値で指定します。
  //   baseline（初期値）
  //   指定した要素のベースラインを親要素のベースラインと揃えます。
  //   top
  //   指定要素を上端揃えにします。
  //   middle
  //   指定要素を中央揃えにします。
  //   bottom
  //   指定要素を下端揃えにします。
  // vertical-align: bottom;

  // というか、
  //   height: 100%;でいいのでは？
}

.cover-slide {
  position: relative;
  overflow: hidden;

  &::after {
    content: "";
    position: absolute;
    z-index: 2;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #eaebe6;
    opacity: 0;
  }
  &.inview {
    &::after {
      opacity: 1;

      @include animation(
        $name: kf-cover-slide,
        $duration: 1.6s,
        $timing-function: ease-in-out
      );
    }
  }
}

// なんでtransform属性で書き換えるのか？
// パフォーマンスです。
// レンダリング（ブラウザに描写させる処理）の工程で
// transformを使う方がパフォーマンスがいい。
// （transform、opacity）
// left, rightなどレイアウトに関わる属性を使うとパフォーマンスが悪い。
@keyframes kf-cover-slide {
  0% {
    transform-origin: left;
    transform: scaleX(0);
  }
  50% {
    transform-origin: left;
    transform: scaleX(1);
  }
  50.1% {
    transform-origin: right;
    transform: scaleX(1);
  }
  100% {
    transform-origin: right;
    transform: scaleX(0);
  }
}

// @keyframes kf-cover-slide {
//   0% {
//     left: 0;
//     right: 100%;
//   }
//   50% {
//     left: 0;
//     right: 0;
//   }
//   100% {
//     left: 100%;
//     right: 0;
//   }
// }

.img-zoom {
  opacity: 0;

  // この書き方はしてない。
  // やっていることは、
  // .inview .img-zoom
  // 中に入っているからと言ってインクルメントされるわけじゃない！
  .inview & {
    opacity: 1;
    transition: transform 0.3s ease;
    @include animation(
      $name: kf-img-show,
      $duration: 1.6s,
      $timing-function: ease-in-out,
      $fill-mode: none
    );

    &:hover {
      transform: scale(1.05);
    }
  }
}

@keyframes kf-img-show {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 0;
  }
  50.1% {
    opacity: 1;
    transform: scale(1.5);
  }
  100% {
    opacity: 1;
  }
}

.hover-darken {
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    transition: background-color 0.3s ease;
    pointer-events: none;
    @include animation(
      $name: kf-img-show,
      $duration: 1.6s,
      $timing-function: ease-in-out,
      $fill-mode: none
    );
  }
  &:hover::before {
    background-color: rgba(0, 0, 0, 0.4);
  }
}

.bg-img-zoom {
  background-image: url(images/image-1.jpg);
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  width: 100%;
  // img要素、background要素それぞれに同じCSSをかけたいとき、
  // img要素で設定した値を1行で持ってこれる@extend
  // これは覚えないといけない。
  @extend .img-zoom;
}

.img-bg50 {
  position: relative;
  // これとても重要
  // background要素で作るとアスペクト比に追従して画像が収縮してくれない。
  // 解決策として以下のようにする。
  &::before {
    display: block;
    content: '';
    padding-top: 50%;
  }
}