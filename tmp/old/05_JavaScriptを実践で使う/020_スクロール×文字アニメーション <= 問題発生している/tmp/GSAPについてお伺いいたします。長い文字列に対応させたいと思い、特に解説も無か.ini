GSAPについてお伺いいたします。長い文字列に対応させたいと思い、特に解説も無かったので、const ta = new TextAnimation(entry.target); ta.animate(); これを

const gta = new GsapTextAnimation(entry.target);gta.animate(); 

とすると、GSAPが効いてくれると思ったのですが、継承元のアニメーションのままです。Chat GPTに聞きましたがコードに問題はないとのことでした。よろしくお願いいたします。

  <section>
    <div class="animate-title">Start where you are. Start where you are. Start where you are. Start where you are.</div>
  </section>
  <section>
    <div class="animate-title">Use what you have.</div>
  </section>
  <section>
    <div class="animate-title">Do what you can.</div>
  </section>

document.addEventListener('DOMContentLoaded', function () {
  const targets = document.querySelectorAll('.animate-title');
  const cb = (entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        console.log(entry);
        // const ta = new TextAnimation(entry.target);
        // ta.animate(); 
        const gta = new GsapTextAnimation(entry.target);
        gta.animate(); 
        observer.unobserve(entry.target);
      }
    });
  };
  const options = {
    root: null,
    rootMargin: '0px',
    threshold: 0
  };

  const io = new IntersectionObserver(cb, options);
  targets.forEach(target => {
    io.observe(target);
  });
});

// 字数を限定したアニメーション
class TextAnimation {
  constructor(el) {
    this.DOM = {};
    this.DOM.el = el instanceof HTMLElement
                    ? el : document.querySelector(el);
    this.chars = this.DOM.el.innerHTML.trim().split("");
    this.DOM.el.innerHTML = this._splitText();
  }
  _splitText() {
    return this.chars.reduce((acc, curr) => {
        curr = curr.replace(/\s+/, '&nbsp;');
        return `${acc}<span class="char">${curr}</span>`;
    }, "");
  }
  animate() {
    this.DOM.el.classList.toggle('inview');
  }
}

// 多字数をGSAPで処理する文字アニメーション
class GsapTextAnimation extends TextAnimation {
  constructor(el) {
    super(el);
    this.DOM.chars = this.DOM.el.querySelectorAll('.char');
  }
  animate() {
    this.DOM.el.classList.add('inview');
    this.DOM.chars.forEach((c, i) => {
      gsap.to(c, .6, {
          ease: Back.easeOut,
          delay: i * .05,
          startAt: { y: '-50%', opacity: 0},
          y: '0%',
          opacity: 1
      });
    });
  }
}