@use '../globals/' as *;
@use '../parts/common' as *;

.hero {
  @extend .mb-lg;
}

.travel {
  @extend .content-width;
  @extend .mb-lg;
  // インナーの影が配置画像で隠れてしまう件、
  // 『ローカル・スタッキング・コンテキスト』を使って
  // z-indexの値で要素を管理する。
  // 1. 『ローカル・スタッキング・コンテキスト』の領域を確保する。
  //     position: relative;
  //     z-index: 0;
  // 2. 背面に送りたい要素に対して、
  //     position: relative;
  //     z-index: -1;
  // これだけ！！！　知らなかった。。。
  &__inner {
    // // 影を擬似要素にする時は外す。
    // position: relative;
    @extend .flex;
    justify-content: space-between;
    padding: 15px;
    background-color: $cBgGray;
    z-index: 0;
    @include mq(md) {
      padding: 50px;
    }
    @include mq(xl) {
      padding: 50px 150px;
    }
  }
  &__img {
    height: 300px;
    @extend .mb-sm;
    box-shadow: inset 0 0 30px $cBlack;
    // 現在、『ローカル・スタッキング・コンテキスト』
    // のやり方は外している。
    // // 影を擬似要素にする時は外す。
    &::before {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      content: '';
      box-shadow: inset 0 0 30px $cBlack;
      @include anime($name: opacity, $dur: 1s, $dly: 3s);
      opacity: 0;
      z-index: 3;
    }
    @include mq(md) {
      flex-basis: 47%;
    }
    @include mq(lg) {
      height: 400px;
    }
    & > img {
      // // 影を擬似要素にする時は外す。
      // position: relative;
      // z-index: -1;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }
  &__texts {
    @extend .pb-sm;
    @include mq(md) {
      display: flex;
      align-items: flex-end;
      flex-basis: 47%;
    }
    &.inview {
      & .travel__title::before {
        @include anime($name: scaleX, $dur: 0.3s, $dly: 2.5s);
      }
    }
  }
  &__title {
    position: relative;
    &::before {
      display: none;
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      left: -120px;
      content: '';
      width: 100px;
      height: 1px;
      background-color: $cBlack;
      transform: scale(0);
      transform-origin: right;
      // これもそう。考え方！
      // 初期状態を作る => メディアクエリで切り替えたい=>スマホ表示はなし、
      // PCで有りとなったときにこう書けるか？
      @include mq(lg) {
        display: block;
      }
    }
  }
  &__discription {
    @include mq(lg) {
      margin-bottom: 40px
    }
  }
}

@keyframes scaleX {
  0% {
    transform: scaleX(0);
  }
  100% {
    transform: scaleX(1);
  }
}

@keyframes opacity {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

.houses {
  @extend .content-width;
  @extend .mb-lg;
  &__inner {
    @extend .flex;
  }
  &__item {
    @include mq(md) {
      // 『display: flex;』の場合、
      // 要素（この場合は画像）を包含する要素の横幅の指定は、
      // 『flex-basis』で設定する。
      @include mq(md) {
        flex-basis: 50%;
        margin-bottom: 20px
      }
      @include mq(lg) {
        margin-bottom: 60px
      }
    }
  }
  &__title {
    @extend .mb-sm;
    @extend .font-lr;
  }
  &__btn {
    text-align: center;
    // 『display: flex;』なので、
    // 『flex-basis』を100％としてセンタリングというわけ。
    // 考え方を変える。
    flex-basis: 100%;
  }
}

.popular {
  // セクション全体の左右にマージンを設けたい。
  // 背景のアミは左右いっぱいまでにしたレイアウトを
  // 実現させるためのアイデア。

  // あえて、『__inner』要素を設けてその擬似要素へ
  // 色をつける作戦。
  // なお、上下自由な位置から末端までアミを広げるネタも
  // 入っている。CSS必見。

  // そしてそして、小見出しが外れることはよくある。
  // その場合は小見出しにマージンを適用させる。
  &__header {
    @extend .content-width;
  }
  &__inner {
    position: relative;
    z-index: 2;
    &::before {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 90%;
      background-color: $cBgGray;
    }
  }
  &__container {
    // 背景画像のz-indexの前後の操作について、
    // 思い込みを無くす。
    // z-indexを使いたい『ためだけに』
    // position: relative;
    // を使っていい。
    position: relative;
    @extend .flex;
    @extend .content-width;
    z-index: 2;
    @include mq(md) {
      justify-content: space-between;
    }
  }
  &__item {
    // 要素（イメージなど）をflexでレイアウトしている時に、
    // 間隔を調整したい時の要領。
    @include mq(md) {
      flex-basis: 47%;
    }
    @include mq(lg) {
      flex-basis: 25%;
    }
    @include mq(xl) {
      flex-basis: 23%;
    }
  }
  &__img {
    height: 150px;
    margin-bottom: 5px;
    @include mq(lg) {
      height: 335px;
    }
    & > img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      // 画像の位置を変えることができるプロパティ
      // object-position: top;
    }
  }
  &__title {
    @extend .mb-sm;
    @extend .font-md;
  }
  &__btn {
    // ここも大事、反対のことをやりがち。
    // 上の『houses』と同じ記述をしている。
    // それは構わない。
    // 共通化より、修正のしやすさを優先しているから。
    text-align: center;
    flex-basis: 100%;
    @extend .mb-lg;
  }
}

.footer {
  @extend .content-width;
  padding: 60px 0;
  & .logo {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 42px;
    @include mq(md) {
      flex-direction: row;
      justify-content: flex-start;
    }
    &__img {
      width: 0.7em;
    }
    &__world {
      color: $cWineRed;
    }
  }
  &__nav {
    @extend .flex;
    text-align: center;
    justify-content: space-between;
    align-items: center;
    @include mq(md) {
    }
    & > ul {
      @extend .flex;
      gap: 20px;
      margin: 10px 0 20px;
      @include mq(md) {
        flex-direction: row;
        gap: 30px;
      }
      & > li {
        & > a {
          color: $cSubTitle;
        }
        // // こういう属性の設定も考え方。
        // // 今までだったら先頭のマージンは無しで。。。
        // // メディアクエリ切り替えてこうしてああして。。。だった。
        // margin: 10px;
        // @include mq(md) {
        //   margin-left: 0px;
        //   margin-right: 30px;
        // }
        // で、わかるんだけど、gapでいいのではないか？
      }
    }
  }
}

